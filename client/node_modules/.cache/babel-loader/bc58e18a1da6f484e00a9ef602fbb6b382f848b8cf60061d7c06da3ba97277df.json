{"ast":null,"code":"var _jsxFileName = \"E:\\\\mern\\\\chessPairingWebApp\\\\client\\\\src\\\\pages\\\\CreateTournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport API from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateTournament = ({\n  onCreate\n}) => {\n  _s();\n  const [name, setName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!name.trim()) return;\n    setLoading(true);\n    try {\n      const res = await API.post('/tournaments', {\n        name\n      });\n      if (onCreate) onCreate(); // Refresh tournament list if callback provided\n      setName('');\n      alert('✅ Tournament created!');\n      navigate(`/tournament/${res.data._id}`);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('❌ Error creating tournament:', err);\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Failed to create tournament');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Tournament\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"tournamentName\",\n          children: \"Tournament Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"tournamentName\",\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"e.g. Summer Chess Open\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-2\",\n        disabled: loading,\n        children: loading ? 'Creating...' : 'Create'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateTournament, \"iFmJtrHy/s1keikvzXkxli8GovM=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateTournament;\nexport default CreateTournament;\nvar _c;\n$RefreshReg$(_c, \"CreateTournament\");","map":{"version":3,"names":["React","useState","useNavigate","API","jsxDEV","_jsxDEV","CreateTournament","onCreate","_s","name","setName","loading","setLoading","navigate","handleSubmit","e","preventDefault","trim","res","post","alert","data","_id","err","_err$response","_err$response$data","console","error","response","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","placeholder","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["E:/mern/chessPairingWebApp/client/src/pages/CreateTournament.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport API from '../utils/api';\r\n\r\nconst CreateTournament = ({ onCreate }) => {\r\n  const [name, setName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!name.trim()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await API.post('/tournaments', { name });\r\n      \r\n      if (onCreate) onCreate(); // Refresh tournament list if callback provided\r\n      setName('');\r\n      alert('✅ Tournament created!');\r\n      navigate(`/tournament/${res.data._id}`);\r\n    } catch (err) {\r\n      console.error('❌ Error creating tournament:', err);\r\n      alert(err.response?.data?.msg || 'Failed to create tournament');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h2>Create New Tournament</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"tournamentName\">Tournament Name</label>\r\n          <input\r\n            id=\"tournamentName\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"e.g. Summer Chess Open\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n            disabled={loading}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mt-2\"\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Creating...' : 'Create'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTournament;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,GAAG,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,CAAC,EAAE;IAElBL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAE;QAAEV;MAAK,CAAC,CAAC;MAEpD,IAAIF,QAAQ,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC1BG,OAAO,CAAC,EAAE,CAAC;MACXU,KAAK,CAAC,uBAAuB,CAAC;MAC9BP,QAAQ,CAAC,eAAeK,GAAG,CAACG,IAAI,CAACC,GAAG,EAAE,CAAC;IACzC,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEJ,GAAG,CAAC;MAClDH,KAAK,CAAC,EAAAI,aAAA,GAAAD,GAAG,CAACK,QAAQ,cAAAJ,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcH,IAAI,cAAAI,kBAAA,uBAAlBA,kBAAA,CAAoBI,GAAG,KAAI,6BAA6B,CAAC;IACjE,CAAC,SAAS;MACRjB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEP,OAAA;IAAKyB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1B,OAAA;MAAA0B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B9B,OAAA;MAAM+B,QAAQ,EAAEtB,YAAa;MAAAiB,QAAA,gBAC3B1B,OAAA;QAAKyB,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB1B,OAAA;UAAOgC,OAAO,EAAC,gBAAgB;UAAAN,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvD9B,OAAA;UACEiC,EAAE,EAAC,gBAAgB;UACnBC,IAAI,EAAC,MAAM;UACXT,SAAS,EAAC,cAAc;UACxBU,WAAW,EAAC,wBAAwB;UACpCC,KAAK,EAAEhC,IAAK;UACZiC,QAAQ,EAAG3B,CAAC,IAAKL,OAAO,CAACK,CAAC,CAAC4B,MAAM,CAACF,KAAK,CAAE;UACzCG,QAAQ;UACRC,QAAQ,EAAElC;QAAQ;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN9B,OAAA;QACEkC,IAAI,EAAC,QAAQ;QACbT,SAAS,EAAC,sBAAsB;QAChCe,QAAQ,EAAElC,OAAQ;QAAAoB,QAAA,EAEjBpB,OAAO,GAAG,aAAa,GAAG;MAAQ;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC3B,EAAA,CApDIF,gBAAgB;EAAA,QAGHJ,WAAW;AAAA;AAAA4C,EAAA,GAHxBxC,gBAAgB;AAsDtB,eAAeA,gBAAgB;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}